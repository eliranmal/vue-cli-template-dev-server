#!/usr/bin/env bash


function usage {
	printf "%s" '
usage
-----

  [env TEMPLATE_PROJECT_DIR="$(npm prefix)"] vue-cli-template-dev-server.sh <output_dir> <output_project_name> [-h]

'
}

function info {
    printf "%s%s" "$(usage)" '
overview
--------

  watch source files of a vue.js custom template project, and triggers the vue-cli init to rebuild the project.
  to be used while developing custom templates.


environment
-----------

  TEMPLATE_PROJECT_DIR
    the local path of the vue-init custom template project to watch.
    defaults to "$(npm prefix)".


arguments
---------

  output_dir
    a local path of the desired directory to pour the generated project into.
    the generated project will be created as a child directory of that path.

  output_project_name
    a name for the directory of the project that will be generated by vue init.

'
}

function main {
	local source_dir="$( cd "$(dirname "${BASH_SOURCE}")" ; pwd -P )"

	if [[ "$@" =~ '-h' ]]; then
		info; exit 0
	fi

	validate_args 2 "$@"
	validate_os
	setup_environment
	ensure_dependencies
	start "$@"
}

function start {
	local template_project_dir
	local output_dir
	local output_project_dir
	local output_project_name="$2"
	# todo - put this in a temp dir provided by the OS
	local expect_path="${source_dir}/vue-init.exp"


	template_project_dir=$(abs_path "$TEMPLATE_PROJECT_DIR")
	output_dir=$(abs_path "$1")
	output_project_dir="$output_dir/$output_project_name"

	# todo - trap
#	trap  'rm -f '"${expect_path}" EXIT

	log ":)"

	# create a directory to force vue-init to ask about overwriting the directory on the first time
	ensure_dir "$output_project_dir"

	log "starting vue init survey"
	start_auto_survey ${output_dir} ${expect_path} ${template_project_dir} "${output_project_name}"
	clear; log "output project generated. waiting for changes..."
	fswatch -o "${template_project_dir}/template" | while read num; do
		log "change detected"
		log "regenerating output project..."
		start_survey ${output_dir} ${expect_path} ${template_project_dir} "${output_project_name}"
		clear; log "output project generated. waiting for changes..."
	done
}

function setup_environment {
	validate_template_project_dir
	ensure_template_project_dir
}

function ensure_dependencies {
	ensure_fswatch
	ensure_expect
}

function start_auto_survey {
	local work_dir="$1"
	local expect_path="$2"
	local template_project_dir="$3"
	local output_project_name="$4"

	pushd ${work_dir} >/dev/null 2>&1
	autoexpect -quiet -f ${expect_path} vue init ${template_project_dir} "${output_project_name}"
	popd >/dev/null 2>&1

	# update the generated expect file to suit our needs
	line_replace ${expect_path} 'set timeout -1' 'set timeout 5' # don't wait forever for an answer
	line_replace ${expect_path} 'expect eof' 'interact' # allow the dev server to keep the process running

	# restore execute permissions (ruined by the file copy in line_replace)
	chmod u+x ${expect_path}
}

function start_survey {
	local work_dir="$1"
	local expect_path="$2"
	local template_project_dir="$3"
	local output_project_name="$4"

	pushd ${work_dir} >/dev/null 2>&1
	${expect_path} ${template_project_dir} "${output_project_name}" >/dev/null 2>&1
	popd >/dev/null 2>&1
}

function validate_template_project_dir {
	if [[ -n "$TEMPLATE_PROJECT_DIR" ]]; then
		if [[ ! -d "$TEMPLATE_PROJECT_DIR" ]]; then
			quit '$TEMPLATE_PROJECT_DIR is not a directory'
		fi
		if ! is_npm_repo "${TEMPLATE_PROJECT_DIR}"; then
			quit '$TEMPLATE_PROJECT_DIR is not an npm project'
		fi
	else
		if ! is_npm_repo "$(npm prefix)"; then
			quit 'not inside an npm project'
		fi
	fi
}

function ensure_template_project_dir {
	TEMPLATE_PROJECT_DIR="${TEMPLATE_PROJECT_DIR:-$(npm prefix)}"
}

function is_npm_repo {
	local dir="$1"
	if [[ -f "${dir}/package.json" ]]; then
		return 0
	else
		return 1
	fi
}

function abs_path {
	local path="$1"
	printf "%s" "$(cd "$(dirname "$path")"; pwd)/$(basename "$path")"
}

function ensure_dir {
	local dir="$1"
	if [[ ! -d "$dir" ]]; then
		mkdir -p "$dir"
	fi
}

#function create_temp_dir {
#	mktemp -d 2>/dev/null || mktemp -d -t 'vue-cli-template-dev-server'
#}
#
## responsibly handle cleanup of the temporary directories
#function cleanup_dir_on_exit {
#	trap 'rm -rf '"$@"' >/dev/null 2>&1' EXIT
#}

function line_replace {
	local file="$1"
	local from="$2"
	local to="$3"
	# bsd/macos specific implementation
	sed -e 's/^'"$from"'$/'"$to"'/' "$file" >"${file}.new"
	mv -- "${file}.new" "$file"
	rm -f "${file}.new"
}

function ensure_fswatch {
	if ! hash fswatch 2>/dev/null; then
		log "fswatch is not installed. installing via brew..."
		# bsd/macos specific implementation
		brew install fswatch
	fi
}

function ensure_expect {
	if ! hash expect 2>/dev/null || ! hash autoexpect 2>/dev/null; then
		log "expect or autoexpect are not installed. installing via brew..."
		# bsd/macos specific implementation
		brew install expect
	fi
}

function validate_args {
	local min=$1; shift
	if (($# < $min)); then
		quit
	fi
}

function validate_os {
	if [[ $OSTYPE = "darwin"* ]]; then # mac
		return 0
	elif [[ $OSTYPE = "linux-gnu" ]]; then # linux
		quit 'linux is not supported at the moment, sorry...'
	elif [[ $OSTYPE = "msys" ]]; then # windows (mingw/git-bash)
		quit 'windows is not supported, sorry...'
	fi
}

function log {
	local msg="$1"
	printf "\n[vue-cli-template-dev-server] %s\n" "$msg"
}

function quit {
	local msg="$1"
	if [[ -n "$msg" ]]; then
		log "$msg"'
'
	else
		usage
	fi
	exit 1
}

# DOwn WInd from the SEwage TREatment PLAnt

main "$@"
