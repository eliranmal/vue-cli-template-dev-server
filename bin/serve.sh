#!/usr/bin/env bash


# todo - use $(npm bin) to detect host project root (and determine a default output path, and default arguments in general)


function usage {
    log "usage:

    vue-init-watcher.sh <template_project_dir> <output_dir> <output_project_name>


overview
========

	watch source files of a vue.js custom template project, and triggers the vue-cli init to rebuild the project.
	to be used while developing custom templates.


arguments
=========

	template_project_dir

		the local path of the vue-init custom template project to watch.

	output_dir

		a local path of the desired directory to pour the generated project into.
		the generated project will be created as a child directory of that path.

	output_project_name

		a name for the directory of the project that will be generated by vue init.

 "
}

function main {
	local source_dir="$( cd "$(dirname "${BASH_SOURCE}")" ; pwd -P )"
    validate_args 3 "$@"
    validate_os
	ensure_fswatch
	ensure_expect
    start "$@"
}

function start {
	local template_project_dir
	local output_dir
	local output_project_dir
	local output_project_name="$3"
	# todo - put this in a temp dir provided by the OS
	local expect_path="${source_dir}/vue-init.exp"

	template_project_dir=$(abs_path "$1")
	output_dir=$(abs_path "$2")
    output_project_dir="$output_dir/$output_project_name"

#    trap  'rm -f '"${expect_path}" EXIT

	log ":)"

	# create a directory to force vue-init to ask about overwriting the directory on the first time
	if [[ ! -d "$output_project_dir" ]]; then
		log "creating a new directory at [$output_project_dir]"
    	mkdir "$output_project_dir"
	fi

	pushd ${output_dir} >/dev/null 2>&1
	log "starting vue init survey"
	autoexpect -quiet -f ${expect_path} vue init "${template_project_dir}" "${output_project_name}"
	popd >/dev/null 2>&1

	line_replace ${expect_path} 'set timeout -1' 'set timeout 5'
	line_replace ${expect_path} 'expect eof' 'interact'

	# restore execute permissions (ruined by the copy in line_replace)
	chmod u+x ${expect_path}

	clear
	log "waiting for changes..."
	fswatch -o "${template_project_dir}/template" | while read num; do
		log "change detected"
		log "triggering vue init with default choices"

		pushd ${output_dir} >/dev/null 2>&1
		${expect_path} ${template_project_dir} ${output_project_name} >/dev/null 2>&1
		popd >/dev/null 2>&1

		clear
		log "waiting for changes..."
	done
}

function abs_path {
	local path="$1"
	printf "%s" "$(cd "$(dirname "$path")"; pwd)/$(basename "$path")"
}

function line_replace {
	local file="$1"
	local from="$2"
	local to="$3"
	# bsd/macos specific implementation
	sed -e 's/^'"$from"'$/'"$to"'/' "$file" >"${file}.new"
	mv -- "${file}.new" "$file"
	rm -f "${file}.new"
}

function ensure_fswatch {
	if ! hash fswatch 2>/dev/null; then
		log "fswatch is not installed. installing via brew..."
		# bsd/macos specific implementation
		brew install fswatch
	fi
}

function ensure_expect {
	if ! hash expect 2>/dev/null || ! hash autoexpect 2>/dev/null; then
		log "expect or autoexpect are not installed. installing via brew..."
		# bsd/macos specific implementation
		brew install expect
	fi
}

function validate_args {
	local min=$1; shift
	if (($# < $min)); then
		usage
		exit 1
	fi
}

function validate_os {
	if [[ $OSTYPE = "darwin"* ]]; then # mac
		return 0
	elif [[ $OSTYPE = "linux-gnu" ]]; then # linux
		log "linux is not supported, sorry..."
		exit 1
	elif [[ $OSTYPE = "msys" ]]; then # windows (mingw/git-bash)
		log "windows is not supported, sorry..."
		exit 1
	fi
}

function log {
	local msg="$1"
	printf "\n[vue-init-template-dev-server] %s\n" "$msg"
}

# DOwn WInd from the SEwage TREatment PLAnt

main "$@"
